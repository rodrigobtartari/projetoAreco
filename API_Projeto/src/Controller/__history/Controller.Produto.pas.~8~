unit Controller.Produto;

interface

uses
  MVCFramework,
  MVCFramework.Commons,
  MVCFramework.Serializer.Commons,
  System.Generics.Collections,
  Entity.Produto,
  FireDAC.Comp.Client,
  FireDAC.Phys.MSSQL,
  MVCFramework.SQLGenerators.MSSQL,
  MVCFramework.ActiveRecord;

  type
  [MVCPath('/api')]
  TControllerProduto = class(TMVCController)
  private
    FDConn : TFDConnection;
  public
    [MVCPath('/produtos')]
    [MVCHTTPMethod([httpGET])]
    procedure GetProdutos;

    [MVCPath('/produtos')]
    [MVCHTTPMethod([httpPOST])]
    procedure AddProduto;

    [MVCPath('/produtos/{$id}')]
    [MVCHTTPMethod([httpGET])]
    procedure GetProduto(id: Integer);

    [MVCPath('/produtos/{$id}')]
    [MVCHTTPMethod([httpPUT])]
    procedure UpdateProduto(id: Integer);

    [MVCPath('/produtos/{$id}')]
    [MVCHTTPMethod([httpDELETE])]
    procedure DeleteProduto(id: Integer);

    constructor create; override;
  end;

implementation

uses
  MVCFramework.Serializer.Intf, System.SysUtils, MVCFramework.DataSet.Utils;

{ TControllerProduto }

procedure TControllerProduto.AddProduto;
var
  Produto: TProduto;
begin
  Produto := Context.Request.BodyAs<TProduto>;
  try
    Produto.Insert;
    Render(201, 'Produto adicionado com sucesso.');
  finally
    Produto.Free;
  end;
end;

constructor TControllerProduto.create;
begin
  inherited;
  FDConn := TFDConnection.Create(nil);
  FDConn.Params.Clear;
  FDConn.Params.DriverID := 'MSSQL';
  FDConn.Params.Database := 'PRODUTOS';
  FDConn.Params.UserName := 'SYSDBA';
  FDConn.Params.Password := '123456';
  FDConn.Params.Add('Server=Steve-PC');
  FDConn.Connected := True;

  ActiveRecordConnectionsRegistry.AddDefaultConnection(FDConn);
end;

procedure TControllerProduto.DeleteProduto(id: Integer);
var
  Produto: TProduto;
begin
  Produto := TMVCActiveRecord.GetByPK<TProduto>(id);

  if Assigned(Produto) then
  begin
    Produto.Delete;
    Render(204, 'Produto excluído com sucesso.');
  end
  else
    Render(404, 'Produto não encontrado.');
end;

procedure TControllerProduto.GetProduto(id: Integer);
var
  Produto: TProduto;
begin
  Produto := TMVCActiveRecord.GetByPK<TProduto>(id);

  if Assigned(Produto) then
    Render(Produto)
  else
    Render(404, 'Produto não encontrado.');
end;

procedure TControllerProduto.GetProdutos;
var Produto : TObjectList<TProduto>;
begin
  Produto := TMVCActiveRecord.SelectRQL<TProduto>('',-1);

  if Produto.Count > 0 then
    Render<TProduto>(Produto)
  else
    Render(404, 'Produtos não encontrados.');
end;

procedure TControllerProduto.UpdateProduto(id: Integer);
var
  Produto: TProduto;
begin
  Produto := Context.Request.BodyAs<TProduto>;
  Produto.ID := id;

  if Assigned(Produto) then
  begin
    Produto.Update;
    Render(200, 'Produto atualizado com sucesso.');
  end
  else
    Render(404, 'Produto não encontrado.');
end;

end.
