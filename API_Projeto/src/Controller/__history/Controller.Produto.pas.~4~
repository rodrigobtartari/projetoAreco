unit Controller.Produto;

interface

uses
  MVCFramework, MVCFramework.Commons, MVCFramework.Serializer.Commons, System.Generics.Collections;

  [MVCPath('/api')]
  TControllerProduto= = class(TMVCController)
  public
    [MVCPath('/produtos')]
    [MVCHTTPMethod([httpGET])]
    procedure GetProdutos(ctx: TWebContext);

    [MVCPath('/produtos')]
    [MVCHTTPMethod([httpPOST])]
    procedure AddProduto(ctx: TWebContext);

    [MVCPath('/produtos/{id}')]
    [MVCHTTPMethod([httpGET])]
    procedure GetProduto(ctx: TWebContext);

    [MVCPath('/produtos/{id}')]
    [MVCHTTPMethod([httpPUT])]
    procedure UpdateProduto(ctx: TWebContext);

    [MVCPath('/produtos/{id}')]
    [MVCHTTPMethod([httpDELETE])]
    procedure DeleteProduto(ctx: TWebContext);
  end;

implementation

uses
  MVCFramework.Serializer.Commons, MVCFramework.Serializer.Intf, System.SysUtils,
  MVCFramework.ActiveRecord, MVCFramework.DataSet.Utils;

{ TProdutoController }

procedure TProdutoController.AddProduto(ctx: TWebContext);
var
  Produto: TProduto;
begin
  Produto := ctx.Request.BodyAs<TProduto>;
  try
    Produto.Insert;
    Render(201, 'Produto adicionado com sucesso.');
  finally
    Produto.Free;
  end;
end;

procedure TProdutoController.DeleteProduto(ctx: TWebContext);
var
  Produto: TProduto;
begin
  Produto := TProduto.FindOne(ctx.Request.Params['id'].ToInt);
  try
    if Assigned(Produto) then
    begin
      Produto.Delete;
      Render(204, 'Produto excluído com sucesso.');
    end
    else
      Render(404, 'Produto não encontrado.');
  finally
    Produto.Free;
  end;
end;

procedure TProdutoController.GetProduto(ctx: TWebContext);
var
  Produto: TProduto;
begin
  Produto := TProduto.FindOne(ctx.Request.Params['id'].ToInt);
  try
    if Assigned(Produto) then
      Render<TProduto>(Produto)
    else
      Render(404, 'Produto não encontrado.');
  finally
    Produto.Free;
  end;
end;

procedure TProdutoController.GetProdutos(ctx: TWebContext);
begin
  Render<TProduto>(TProduto.Select);
end;

procedure TProdutoController.UpdateProduto(ctx: TWebContext);
var
  Produto: TProduto;
begin
  Produto := ctx.Request.BodyAs<TProduto>;
  try
    if TProduto.UpdateFromDataSet(ctx.Request.Params['id'].ToInt, Produto) then
      Render(200, 'Produto atualizado com sucesso.')
    else
      Render(404, 'Produto não encontrado.');
  finally
    Produto.Free;
  end;
end;

end.
